Rhythmus Project Change Log


* 시험 끝날 즈음의 2012년의 12월 중순의 어느 날: 간략한 계획서 및 구조도 고안
 [프로젝트명: rhygay; 리게이]

 - BMSParser: 데이터 인코딩 및 파싱하여 구조화시켜 저장하는 역할. [메타데이터], [노트데이터] 구별해서 담기.
 - BMSSoundManager: Load 및 Mapping을 통해 데이터와 매칭시키기. Map된 키음에 따라 소리 출력. Dx 기반이 될 예정이라 DxCore와 연동 계획.
 - BMSBGAManager: [동영상] 및 [이미지]를 지원할 계획. 이미지 프린팅 구현을 우선시 한다. DxCore와의 연동 필요.
 - DxCore: Dx, Device, Sound 등 객체 초기화 및 Release
 - DxSoundManager
 - DxSurfaceManager
 - DxKeyManager? -> 확실하지 않은 Implement.
 - MainCore
  - Application: 창 생성 및 객체들 배치. 흐름 제어 루틴 이외는 최대한 여러 상위 객체들을 이용해 최소한의 코드로 흐름 제어 가독성이 뛰어나도록 구현한다.
  - 프로그램 흐름 제어: Intro, Select, Decide, Play, Result, Option 등의 객체를 사용한다. Paint, Key, Timer 등의 기본적인 객체를 만들고 이를 상속(virtual)받는 식으로 처리하여 paint 호출, key 매핑, timer tick의 간단한 코드만으로 본 프로그램에서 구현이 가능하도록 한다.

 [저번의 LightStepMania프로젝트처럼 "심히" 무계획하게 짜다가 복잡한 구현의 한계로 흐지부지 끝나버리는 불상사는 없도록 해야겠다.]
 [일단, BMS 파일의 파싱 및 노트 Print가 제일 우선이다. 이걸 구현해야 다른 기능들도 차차 구현해 나가지...]
 [Skin은 LR2와 호환시키는 방향으로 나갈 예정이다. LR2가 괜히 고퀄이 아닌 이유, rhythm-it의 뛰어난 구동기가 제 자리를 못 찾는 이유가 바로 스킨 및 인터페이스라고 본다. 거기에 덤으로, 고해상도 및 와이드 해상도를 지원할 수 있도록 확장 명령어 및 여타 호환성 기능들을 추가할 생각.]
 [Network 기능도 구현할 생각이지만 이는 정식 릴리즈 때에나 가능할 듯. 알파버전은 스킨 호환 및 BMS 구동까지를 기점으로 한다.]
 [ http://bit.sparcs.org/~tokigun/article/bmsguide.php 여기를 주로 참조할 예정.]


* 12/24일?
 [본격적인 구현에 들어가면서 일부 구조가 보완되었다.]
 - BMSPlay 객체 추가: BMSParser 값을 이용하여 그리는 알고리즘 및 판정 등의 게임 플레이 부분의 핵심 부위를 담당할 예정이다. BMSParser 다음 곧바로 구현 예정.
 [파서를 계속 구현했던 것으로 기억한다. WinMain을 만들지 않은 관계로 컴파일은 없음.]


* 12/25일?
 [주구장창 LoL을 했던 걸로 기억하지만 -_-; 그래도 쬐금씩 작업 진척.]
 [파서 완성을 했던 것으로 기억한다. BMSPlay의 개략적인 모습을 완성.]
 [common.h 헤더를 넣어서 그럴듯한? 공용 헤더를 만들고 여기에 필요한 상수들을 왕왕 집어넣을 계획. 하지만 조금 포지션이 어중간한 느낌이 있다...]


* 12/26
 [롤 하느라 ... 별로 못 짰다 헤헤;]
 [BMSPlay를 구현하는데 주로 시간을 썼지만 큰 성과는 없었다. 판정 및 키음은 Time으로, Draw는 Beat 기준으로 작업하려고 했으나 어째 하다보니 Time으로 맞추는 게 더 나을 것 같다는 생각이 든다... ㅠㅠ. 그래도 어떻게든 변속 BPM을 지원할 방법을 고안해냈으니 상관 없으리라 생각하며 작업중. 그런데 이게 은근 쉽지가 않다.. 모니터만 보는 걸로는 안 되겠고, 종이로도 끄적이면서 작업하는 게 필수적인 것 같다.]
 [위의 작업을 위해서 BeatfromTime, TimefromBeat, GetValidNoteFromBeat, 등의 메서드를 필수적이라고 생각하고 구현에 힘쓰고 있다. 생각해보니 이와 비슷한 메서드를 한때 스메 오픈코드 소스에서 봤던 것 같기도 한데 ...]
 [여담으로 BMS 포멧중에서 제일 골치아픈 것 세가지... 롱노트와 BGAxx와 STP. STP는 STOP랑 비슷한 주제 채널믹싱 시켜서 구현해야 할 판이니 괜히 귀찮게 되는 문제가 있고 BGAxx는 데이터를 어떻게 저장해야 하나 싶어서 귀찮아지고 롱노트는 데이터 저장 그리고 호출 그리고 변속 등 모든 부분에서 제일 탑 짜증이다 아오 싯발 이거 만들수나 있을까]
 [이거 하느라 악기연습 좀 하려고 했는데 별로 못 하고 있다]
 [덤으로 일 다니느라, 여기저기서 압박 받느라, 힘들다... 빨리 독립 하고 니트가 되던가 해야지]
 [여전히 컴파일 안 했다.]
 

* 12/27
 [오늘은 롤 안했다!]
 [프로젝트명을 rhygay에서 Rhythmus로 변경. 어제 자려고 하는데 문득 생각난 아이디어였나.. 어쨌든간 rhygay는 좀 천박해 보여서 ;; 변경했다. Rhyth-mus(리트머스) 좋잖아 이름! 헤헤. 구글링해도 딱히 겹치는 이미지 같은 게 없는 걸로 보아 이걸로 당첨.]
 [변속이 제일 골 때리고, "변속을 기준"으로 모든 작업을 처리해야 된다는 것을 깨달았다. 이는 Drawing와 Time~Beat 작업에 공통적이지만 후자는 STOP도 고려해 주어야 한다는 점. 뭐 그래봐야 STOP는 Time에다가 상수놀음만 조금 더 해주는 것 뿐이지만... BPM과 채널을 믹싱해 주어야 한다는 점은 골아프다. 구현을 하긴 했는데 영 껄끄럽다... 에러 왕창 터지겠지]
 [Application까지 완성했다. 왜 _tWinMain하면 링킹에러가 뜨고 WinMain해야 제대로 돌아가는지는 여전히 잘 모르겠지만 일단 됐다. 기왕 한 김에 Load BMS까지 테스트 했고 버그 이것저것 잡고 나니 얼추 되었다. JP, KO 인코딩을 다 지원하도록 유니코드 기반으로 짜고 있는데 인코딩 변환에서 문제가 발생해 약간 삽질한 것 빼곤.]
 [12/27일날 이 텍스트 작성을 했는데 쓰느라 벌써 30분이 지나갔다. 맨날 새벽 2~3시에 잔다. 아침형 인간은 있을 수 없지만 맨날 아침에 일어나야 하는 현실이라 ... 애달프다]


* 12/28
 [파싱한 데이터 처리를 다르게 해 보려고 한다. 한 채널의 데이터는 이와 같이 분할된다.]
 int keyCnt[channel]
 double keyBeat[channel][MAXKEYCNT]
 int keyValue[channel][MAXKEYCNT]
 [예전에 하다 만 프로젝트도 이와 같이 분할했던것 같은데 ... 단지 기준이 Time 대신 Beat로 이번엔 처리했을 뿐.]
 [마찬가지로 BPM을 제일 우선순위로 하여 여타 다른 것들을 처리한다.]
 [일단은 DX 말고 GDI라도 도입해 봐야겠다. NoteDraw메서드까지 도입 완료. 그런데 virtual 함수가 좀 희한하게 지정되네 ... 음]
 [빌드 넘버도 도입하려 함... 플러그인 설치로 일단 어찌 해 봤다.]
 [파싱 데이터 변환까진 했는데 Beat <=> Time 변환은 여전히 감감 무소식. 이게 되어야 이제 본격 화면에 드로잉을 할 텐데...]

* ~1/5 ?
 *.lr2file, *.csv 파일 포멧 분석 완료.
 lr2와의 스킨 호환을 염두에 두고 작업 시작.

* 1/7~1/14
 Gone to America

* ~1/20
 DirectX9 초기화 및 Sprite/Texture 부분의 구현.

* 1/21~
 csv 파일 파서 및 객체 structure/드로잉 알고리즘 구현
 파서가 코드를 읽고 매니저에서 객체 로드를 담당해야 하는데 상호참조형태로 가다 보니 코드가 꼬였다.
 파서의 명령어를 처리하는 부분에서 로드를 수행할 수 있어야 하는데 ...
 -> 외부에서 사용할 수 있도록 addr을 받거나 ...

* 1/25.
 파서에서 데이터를 처리해야 한다. 하지만 그렇게 하자니 상호참조의 에러가 생긴다
 방법이 두 가지다. 파서에서 데이터를 읽게 하거나 다른 부분에서 데이터를 읽게 하거나...
 후자는 읽어온 데이터들을 체계적으로 정리해 놓아야 한다.
 생각해보니 로딩 프로세스를 보여주기 위해서는 후자의 과정이 더 적합한 것 같다...
 파서 문자열을 통째로 저장할 수는 없다. 차라리 데이터를 잘 저장해놓는 저장소의 역할을 함께 담당하는게 좋겠다.

* 1/30
 드디어 처음으로! 스킨이 적용된 기초 프레임을 띄우는 데 성공.
기초 프레임워크가 정상작동한다는 이야기.
 #IF와 OP 분기점 및 여타 파서문을 인식시키는 작업만 끝내면 된다... 는 말은 쉬운데 막막하기 그지없다.
 이제서야 첫 발걸음을 뗀 이 막막함...
 일단 #IF 명령어 인식, 이후 KEY와 같은 다른 명령어 인식, 이후 OP 분기점을 만드는 걸로 해야겠다.
  - Skin Document 자료수집 및 개략적인 구조해석 끝

* 1/31
 목표:
 지원 명령어 추가: #IF, #ELSEIF, #ENDIF, #***_NOTE, 
 - 추가적인 명령어 (순서대로): #***_LINE, #***_GROOVE/GUAGE, #***_TEXT, #***_NUMBER, #***_SLIDER, #***_BUTTON,
 + #***_LN_START, BODY, END, #***_BGA, #***_NOWJUDGE_1P, #***_NOWCOMBO_1P, #***_BARGRAPH, #FADEOUT, #CLOSE, #STARTINPUT, #LOADSTART, #LOADEND, #PLAYSTART
 타이머 구현하기
 OP 시스템
 분

* 2/1
 타이머와 op 시스템 구현 및 관련 상수들 추가.
 구조를 좀 더 체계화 중이며 체계화할 필요가 있음.

* 2/2
 op가 !가 아니라 - 이다... nop와 op를 통합시켜놔야겠다
 목표: 스위치 및 타이머 동작시키기
  -> 관문: 수많은 파일들과의 연동
 다음 목표: 노트드로잉 및 보다 많은 명령어 지원, sprite 스케일링 지원
 차후 목표: 키 인풋 및 사운드 지원! 그렇게 프리뷰가 가능해지면 베타버전을 웹에 올린다.